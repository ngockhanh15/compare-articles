const mongoose = require('mongoose');
const DocumentAVLService = require('./be/services/DocumentAVLService');

// Connect to MongoDB
mongoose.connect('mongodb://localhost:27017/plagiarism_checker', {
  useNewUrlParser: true,
  useUnifiedTopology: true
});

async function debugPercentageIssue() {
  try {
    console.log('üîç Starting percentage calculation debug...');
    
    const documentAVLService = new DocumentAVLService();
    
    // Test v·ªõi m·ªôt vƒÉn b·∫£n m·∫´u
    const testText = `ƒê√¢y l√† m·ªôt vƒÉn b·∫£n test ƒë·ªÉ ki·ªÉm tra t·ª∑ l·ªá tr√πng l·∫∑p. 
    Ch√∫ng ta s·∫Ω xem li·ªáu c√≥ s·ª± kh√¥ng nh·∫•t qu√°n gi·ªØa t·ª∑ l·ªá t·ªïng th·ªÉ v√† t·ª∑ l·ªá t·ª´ng document kh√¥ng.
    VƒÉn b·∫£n n√†y c√≥ th·ªÉ tr√πng l·∫∑p v·ªõi m·ªôt s·ªë documents trong database.`;
    
    console.log('üìù Test text:', testText);
    console.log('üìè Text length:', testText.length);
    
    // Th·ª±c hi·ªán ki·ªÉm tra
    const result = await documentAVLService.checkDuplicateContent(testText, {
      minSimilarity: 10, // Gi·∫£m threshold ƒë·ªÉ d·ªÖ test
      chunkSize: 50,
      maxResults: 20
    });
    
    console.log('\nüéØ RESULTS ANALYSIS:');
    console.log('='.repeat(50));
    console.log(`Overall duplicate percentage: ${result.duplicatePercentage}%`);
    console.log(`Total matches found: ${result.matches.length}`);
    console.log(`Checked documents: ${result.checkedDocuments}`);
    
    if (result.matches.length > 0) {
      console.log('\nüìä INDIVIDUAL DOCUMENT SIMILARITIES:');
      result.matches.forEach((match, index) => {
        console.log(`${index + 1}. Document: "${match.title}"`);
        console.log(`   - Similarity: ${match.similarity}%`);
        console.log(`   - Matched hashes: ${match.matchedHashes}/${match.totalHashes}`);
        console.log(`   - Method: ${match.method}`);
        console.log('');
      });
      
      // Ki·ªÉm tra logic t√≠nh to√°n
      const highestSimilarity = Math.max(...result.matches.map(m => m.similarity));
      console.log(`üîç CONSISTENCY CHECK:`);
      console.log(`Highest individual similarity: ${highestSimilarity}%`);
      console.log(`Overall duplicate percentage: ${result.duplicatePercentage}%`);
      console.log(`Are they consistent? ${highestSimilarity === result.duplicatePercentage ? '‚úÖ YES' : '‚ùå NO'}`);
      
      if (highestSimilarity !== result.duplicatePercentage) {
        console.log('üö® INCONSISTENCY DETECTED!');
        console.log('This explains why frontend shows different percentages.');
      }
    } else {
      console.log('No matches found with current threshold.');
    }
    
    console.log('\nüìà ADDITIONAL INFO:');
    console.log(`Dtotal: ${result.dtotal}`);
    console.log(`DA/B: ${result.dab}`);
    console.log(`Most similar document: ${result.mostSimilarDocument?.name || 'None'}`);
    
  } catch (error) {
    console.error('‚ùå Error during debug:', error);
  } finally {
    mongoose.connection.close();
  }
}

debugPercentageIssue();