const vietnameseStopwordService = require('../services/VietnameseStopwordService');

async function testPhraseProtection() {
  console.log('üöÄ Testing Vietnamese Stopword Service with Phrase Protection');
  
  try {
    // Kh·ªüi t·∫°o service
    await vietnameseStopwordService.initialize();
    
    // Test cases
    const testTexts = [
      'T√¥i th√≠ch xem th·ªÉ thao v√† ƒë·ªçc b√°o v·ªÅ kinh t·∫ø',
      'C√¥ng ngh·ªá th√¥ng tin v√† tr√≠ tu·ªá nh√¢n t·∫°o ƒëang ph√°t tri·ªÉn',
      'B√†i vi·∫øt v·ªÅ y t·∫ø v√† s·ª©c kh·ªèe r·∫•t h·ªØu √≠ch',
      'M·∫°ng x√£ h·ªôi ·∫£nh h∆∞·ªüng ƒë·∫øn ƒë·ªùi s·ªëng x√£ h·ªôi',
      'H·ªçc m√°y v√† big data l√† xu h∆∞·ªõng c√¥ng ngh·ªá m·ªõi'
    ];
    
    console.log('\nüìä Testing different tokenization methods:');
    console.log('='.repeat(60));
    
    for (let i = 0; i < testTexts.length; i++) {
      const text = testTexts[i];
      console.log(`\n${i+1}. Text: "${text}"`);
      
      // Method 1: tokenizeWithWordTokenizer (new method - automatic phrase detection)
      console.log('\n   ü§ñ With Word Tokenizer (Auto Phrase Detection):');
      const withWordTokenizer = vietnameseStopwordService.tokenizeWithWordTokenizer(text);
      console.log('   ', withWordTokenizer);
      
      // Method 2: tokenizeWithPhraseProtection (manual phrase protection)
      console.log('\n   ÔøΩ With Manual Phrase Protection:');
      const withProtection = vietnameseStopwordService.tokenizeWithPhraseProtection(text);
      console.log('   ', withProtection);
      
      // Method 3: tokenizeAndFilterUnique (old method)
      console.log('\n   üìù Without Phrase Protection (Old Method):');
      const withoutProtection = vietnameseStopwordService.tokenizeAndFilterUnique(text);
      console.log('   ', withoutProtection);
      
      // Method 4: extractMeaningfulWords (improved)
      console.log('\n   üìù Extract Meaningful Words:');
      const meaningful = vietnameseStopwordService.extractMeaningfulWords(text);
      console.log('   ', meaningful);
      
      // Method 5: removeStopwords (improved)
      console.log('\n   üìù Remove Stopwords:');
      const removed = vietnameseStopwordService.removeStopwords(text);
      console.log('   ', removed);
      
      console.log('\n' + '-'.repeat(60));
    }
    
    // Test phrase protection functionality
    console.log('\nüîí Testing Phrase Protection Functions:');
    console.log('='.repeat(60));
    
    const testText = 'Nghi√™n c·ª©u v·ªÅ tr√≠ tu·ªá nh√¢n t·∫°o v√† h·ªçc m√°y trong y t·∫ø';
    console.log(`\nOriginal text: "${testText}"`);
    
    const { text: protected, mappings } = vietnameseStopwordService.protectPhrases(testText);
    console.log(`Protected text: "${protected}"`);
    console.log('Mappings:', Array.from(mappings.entries()));
    
    const restored = vietnameseStopwordService.restorePhrases(protected, mappings);
    console.log(`Restored text: "${restored}"`);
    
    // Test preserved phrases management
    console.log('\nüìö Testing Preserved Phrases Management:');
    console.log('='.repeat(60));
    
    const allPhrases = vietnameseStopwordService.getAllPreservedPhrases();
    console.log('\nCustom preserved phrases:', allPhrases.customPhrases.slice(0, 10));
    console.log('Stopword phrases:', allPhrases.stopwordPhrases.slice(0, 10));
    
    // Test adding new phrase
    vietnameseStopwordService.addPreservedPhrase('machine learning');
    console.log('\n‚úÖ Added "machine learning" to preserved phrases');
    
    console.log('Is "th·ªÉ thao" preserved?', vietnameseStopwordService.isPreservedPhrase('th·ªÉ thao'));
    console.log('Is "machine learning" preserved?', vietnameseStopwordService.isPreservedPhrase('machine learning'));
    
    // Test with new phrase
    const testWithNew = 'Machine learning v√† th·ªÉ thao l√† hai lƒ©nh v·ª±c kh√°c nhau';
    console.log(`\nTesting with new phrase: "${testWithNew}"`);
    const tokensWithNew = vietnameseStopwordService.tokenizeWithWordTokenizer(testWithNew);
    console.log('Tokens (Word Tokenizer):', tokensWithNew);
    
    const tokensWithProtection = vietnameseStopwordService.tokenizeWithPhraseProtection(testWithNew);
    console.log('Tokens (With Protection):', tokensWithProtection);
    
    console.log('\n‚úÖ All tests completed successfully!');
    
  } catch (error) {
    console.error('‚ùå Error during testing:', error);
  }
}

// Run the test
if (require.main === module) {
  testPhraseProtection();
}

module.exports = testPhraseProtection;
