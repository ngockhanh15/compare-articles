const mongoose = require('mongoose');
const Document = require('../models/Document');
const documentAVLService = require('../services/DocumentAVLService');

async function reindexDocument() {
  try {
    console.log('=== K·∫æT N·ªêI DATABASE ===');
    require('dotenv').config();
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ ƒê√£ k·∫øt n·ªëi MongoDB');
    
    console.log('\n=== KH·ªûI T·∫†O SERVICES ===');
    if (!documentAVLService.initialized) {
      await documentAVLService.initialize();
    }
    
    console.log('\n=== T√åM V√Ä REINDEX DOCUMENT ===');
    const doc = await Document.findById('689b28cf0244a730687600a8');
    
    if (doc) {
      console.log(`Found document: ${doc.title}`);
      console.log(`Current AVL data word count: ${doc.avlTreeData.hashVector.length}`);
      
      console.log('\n=== T·∫†O L·∫†I AVL TREE DATA ===');
      const newAvlTreeData = await documentAVLService.addDocumentToTree(doc);
      
      console.log(`New AVL data word count: ${newAvlTreeData.hashVector.length}`);
      console.log('New hash vector:');
      newAvlTreeData.hashVector.forEach((item, index) => {
        console.log(`  ${index}: "${item.word}" -> ${item.hash}`);
      });
      
      // C·∫≠p nh·∫≠t document
      doc.avlTreeData = newAvlTreeData;
      await doc.save();
      
      console.log('\n‚úÖ Document ƒë√£ ƒë∆∞·ª£c reindex th√†nh c√¥ng!');
      
      // Ki·ªÉm tra c·ª•m t·ª´ ƒë∆∞·ª£c b·∫£o v·ªá
      const phrases = newAvlTreeData.hashVector.filter(item => item.word.includes(' '));
      if (phrases.length > 0) {
        console.log('\nüéâ C√ÅC C·ª§M T·ª™ ƒê∆Ø·ª¢C B·∫¢O V·ªÜ:');
        phrases.forEach(phrase => {
          console.log(`  - "${phrase.word}"`);
        });
      }
      
    } else {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y document');
    }
    
  } catch (error) {
    console.error('L·ªói:', error);
  } finally {
    await mongoose.connection.close();
  }
}

reindexDocument();
