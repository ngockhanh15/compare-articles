const { TreeAVL, TextHasher } = require('./utils/TreeAVL');
const vietnameseStopwordService = require('./services/VietnameseStopwordService');

async function testAVLLogic() {
  try {
    console.log('üöÄ Testing AVL Tree Logic (without MongoDB)...\n');

    // Initialize Vietnamese stopword service
    await vietnameseStopwordService.initialize();
    console.log('‚úÖ Vietnamese Stopword Service initialized\n');

    // Create a new AVL tree
    const tree = new TreeAVL();

    // Sample document text
    const documentText = `
      Tr√≠ tu·ªá nh√¢n t·∫°o l√† m·ªôt lƒ©nh v·ª±c c·ªßa khoa h·ªçc m√°y t√≠nh.
      N√≥ t·∫≠p trung v√†o vi·ªác t·∫°o ra c√°c h·ªá th·ªëng th√¥ng minh.
      C√°c h·ªá th·ªëng n√†y c√≥ th·ªÉ h·ªçc h·ªèi v√† ƒë∆∞a ra quy·∫øt ƒë·ªãnh.
      Machine learning l√† m·ªôt ph·∫ßn quan tr·ªçng c·ªßa AI.
      Deep learning s·ª≠ d·ª•ng m·∫°ng neural nh√¢n t·∫°o.
    `;

    // Test text (similar to document)
    const testText = `
      Tr√≠ tu·ªá nh√¢n t·∫°o l√† lƒ©nh v·ª±c khoa h·ªçc m√°y t√≠nh.
      N√≥ t·∫°o ra h·ªá th·ªëng th√¥ng minh c√≥ th·ªÉ h·ªçc h·ªèi.
      Machine learning quan tr·ªçng trong AI.
    `;

    console.log('üìÑ Document text:');
    console.log(documentText);
    console.log('\nüìù Test text:');
    console.log(testText);
    console.log('\n' + '='.repeat(50) + '\n');

    // Create word hashes for document
    const documentHashes = TextHasher.createWordHashes(documentText, true);
    console.log(`üìä Document generated ${documentHashes.length} word hashes`);

    // Add document hashes to tree
    const documentData = {
      documentId: 'test-doc-1',
      title: 'Test Document',
      fileType: 'txt',
      fullText: documentText
    };

    for (const wordHash of documentHashes) {
      tree.insert(wordHash.hash, documentData);
    }

    console.log(`üå≥ Tree size after inserting document: ${tree.getSize()}`);

    // Create word hashes for test text
    const testHashes = TextHasher.createWordHashes(testText, true);
    console.log(`üìä Test text generated ${testHashes.length} word hashes`);

    // Search for matches
    let matchedHashes = 0;
    const matchedWords = [];

    for (const wordHash of testHashes) {
      const foundNode = tree.search(wordHash.hash);
      if (foundNode) {
        matchedHashes++;
        matchedWords.push(wordHash.word);
        console.log(`‚úÖ Found match for word: "${wordHash.word}"`);
      }
    }

    // Calculate similarity
    const similarity = Math.round((matchedHashes / testHashes.length) * 100);

    console.log('\n' + '='.repeat(50));
    console.log('üìä Results:');
    console.log(`- Matched hashes: ${matchedHashes}/${testHashes.length}`);
    console.log(`- Similarity: ${similarity}%`);
    console.log(`- Matched words: ${matchedWords.join(', ')}`);

    if (similarity > 0) {
      console.log('\n‚úÖ SUCCESS: The AVL tree logic is working correctly!');
      console.log('The system can now detect similar content.');
    } else {
      console.log('\n‚ùå ISSUE: No matches found. This could indicate:');
      console.log('1. Word hashing is not working properly');
      console.log('2. Stopword filtering is too aggressive');
      console.log('3. Hash comparison logic has issues');
    }

    // Debug: Show some hashes
    console.log('\nüîç Debug - First 5 document word hashes:');
    documentHashes.slice(0, 5).forEach((hash, i) => {
      console.log(`${i + 1}. "${hash.word}" -> ${hash.hash.substring(0, 8)}...`);
    });

    console.log('\nüîç Debug - First 5 test word hashes:');
    testHashes.slice(0, 5).forEach((hash, i) => {
      console.log(`${i + 1}. "${hash.word}" -> ${hash.hash.substring(0, 8)}...`);
    });

  } catch (error) {
    console.error('‚ùå Test failed:', error);
  }
}

// Run the test
testAVLLogic();