/**
 * Ph√¢n t√≠ch logic t√≠nh theo c·∫∑p c√¢u (sentence pairs)
 * D·ª±a tr√™n DocumentAVLService.findDuplicateSentences
 */

const vietnameseStopwordService = require('../be/services/VietnameseStopwordService');
const { TextHasher } = require('../be/utils/TreeAVL');

class SentencePairAnalyzer {
  constructor() {
    this.initialized = false;
  }

  async initialize() {
    if (!this.initialized) {
      console.log('üîß Kh·ªüi t·∫°o Vietnamese Stopword Service...');
      await vietnameseStopwordService.initialize();
      this.initialized = true;
      console.log('‚úÖ Kh·ªüi t·∫°o ho√†n t·∫•t!');
    }
  }

  // Logic t√°ch c√¢u gi·ªëng TextHasher.extractSentences
  extractSentences(text) {
    const sentences = text
      .split(/[.!?]+/)
      .map((sentence) => sentence.trim())
      .filter((sentence) => sentence.length > 10); // L·ªçc c√¢u qu√° ng·∫Øn

    return sentences;
  }

  // Logic t√≠nh ƒë·ªô t∆∞∆°ng ƒë·ªìng cho c·∫∑p c√¢u (gi·ªëng findDuplicateSentences)
  async findDuplicateSentences(inputText, documentText) {
    await this.initialize();
    
    console.log('üîç PH√ÇN T√çCH LOGIC T√çNH THEO C·∫∂P C√ÇU');
    console.log('='.repeat(60));
    
    console.log('üìù VƒÉn b·∫£n g·ªëc:');
    console.log('Input Text:', inputText);
    console.log('Doc Text:  ', documentText);
    
    // B∆∞·ªõc 1: T√°ch th√†nh c√°c c√¢u
    const inputSentences = this.extractSentences(inputText);
    const docSentences = this.extractSentences(documentText);
    
    console.log('\nüìä T√°ch c√¢u:');
    console.log('Input sentences:', inputSentences.length);
    inputSentences.forEach((sentence, index) => {
      console.log(`  ${index + 1}. "${sentence}"`);
    });
    
    console.log('Doc sentences:', docSentences.length);
    docSentences.forEach((sentence, index) => {
      console.log(`  ${index + 1}. "${sentence}"`);
    });
    
    // B∆∞·ªõc 2: So s√°nh t·ª´ng c·∫∑p c√¢u
    const duplicateSentences = [];
    let pairIndex = 0;
    
    console.log('\nüîó SO S√ÅNH T·ª™NG C·∫∂P C√ÇU:');
    console.log('-'.repeat(60));
    
    for (const inputSentence of inputSentences) {
      const inputWords = vietnameseStopwordService.extractMeaningfulWords(inputSentence);
      
      for (const docSentence of docSentences) {
        pairIndex++;
        const docWords = vietnameseStopwordService.extractMeaningfulWords(docSentence);
        
        // T√≠nh s·ªë t·ª´ chung
        const commonWords = inputWords.filter(word => docWords.includes(word));
        const similarity = inputWords.length > 0 
          ? (commonWords.length / inputWords.length) * 100 
          : 0;
        
        console.log(`\nC·∫∑p ${pairIndex}:`);
        console.log(`  Input: "${inputSentence}"`);
        console.log(`  Doc:   "${docSentence}"`);
        console.log(`  Input words: [${inputWords.join(', ')}] (${inputWords.length} t·ª´)`);
        console.log(`  Doc words:   [${docWords.join(', ')}] (${docWords.length} t·ª´)`);
        console.log(`  Common words: [${commonWords.join(', ')}] (${commonWords.length} t·ª´)`);
        console.log(`  Similarity: (${commonWords.length}/${inputWords.length}) √ó 100 = ${similarity.toFixed(2)}%`);
        
        // N·∫øu ƒë·ªô t∆∞∆°ng ƒë·ªìng >= 50%, coi l√† c√¢u tr√πng l·∫∑p
        if (similarity >= 50) {
          const duplicateInfo = {
            inputSentence,
            docSentence,
            similarity: Math.round(similarity),
            commonWords: commonWords.length,
            inputWords,
            docWords,
            commonWordsList: commonWords
          };
          
          duplicateSentences.push(duplicateInfo);
          console.log(`  ‚úÖ TR√ôNG L·∫∂P (${Math.round(similarity)}% >= 50%)`);
        } else {
          console.log(`  ‚ùå KH√îNG TR√ôNG L·∫∂P (${Math.round(similarity)}% < 50%)`);
        }
      }
    }
    
    // B∆∞·ªõc 3: T√≠nh t·ª∑ l·ªá tr√πng l·∫∑p t·ªïng th·ªÉ
    const overallSimilarity = duplicateSentences.length > 0 
      ? Math.round(duplicateSentences.reduce((sum, s) => sum + s.similarity, 0) / duplicateSentences.length)
      : 0;
    
    console.log('\nüìà K·∫æT QU·∫¢ T·ªîNG TH·ªÇ:');
    console.log('='.repeat(60));
    console.log(`S·ªë c·∫∑p c√¢u tr√πng l·∫∑p: ${duplicateSentences.length}`);
    console.log(`T·ªïng s·ªë c·∫∑p c√¢u ki·ªÉm tra: ${pairIndex}`);
    
    if (duplicateSentences.length > 0) {
      console.log('\nChi ti·∫øt c√°c c·∫∑p tr√πng l·∫∑p:');
      duplicateSentences.forEach((dup, index) => {
        console.log(`  ${index + 1}. ${dup.similarity}% - "${dup.inputSentence}" vs "${dup.docSentence}"`);
      });
      
      console.log('\nT√≠nh t·ª∑ l·ªá trung b√¨nh:');
      const similarities = duplicateSentences.map(d => d.similarity);
      console.log(`C√°c t·ª∑ l·ªá: [${similarities.join('%, ')}%]`);
      console.log(`Trung b√¨nh: (${similarities.join(' + ')}) / ${similarities.length} = ${overallSimilarity}%`);
    }
    
    console.log(`\nüéØ T·ª∂ L·ªÜ TR√ôNG L·∫∂P CU·ªêI C√ôNG: ${overallSimilarity}%`);
    
    return {
      inputSentences,
      docSentences,
      duplicateSentences,
      overallSimilarity,
      totalPairs: pairIndex
    };
  }
}

// Test v·ªõi 2 c√¢u c·ª• th·ªÉ
async function analyzeSentencePairs() {
  const analyzer = new SentencePairAnalyzer();
  
  try {
    const inputText = "Th·ªÉ thao l√† m√¥n ∆∞a th√≠ch c·ªßa m·ªçi ng∆∞·ªùi t√¥i c≈©ng kh√¥ng ƒë·∫∑c bi·ªát";
    const docText = "T√¥i l√† Kh√°nh, t√¥i ∆∞a th√≠ch th·ªÉ thao, ƒë·∫∑c bi·ªát l√† ƒë√° b√≥ng";
    
    const result = await analyzer.findDuplicateSentences(inputText, docText);
    
    console.log('\nüí° GI·∫¢I TH√çCH T·∫†I SAO 83%:');
    console.log('='.repeat(60));
    
    if (result.overallSimilarity === 83) {
      console.log('‚úÖ K·∫øt qu·∫£ kh·ªõp v·ªõi 83% nh∆∞ mong ƒë·ª£i!');
      console.log('Logic: Ch∆∞∆°ng tr√¨nh so s√°nh t·ª´ng c·∫∑p c√¢u v√† l·∫•y trung b√¨nh');
      console.log(`C√≥ ${result.duplicateSentences.length} c·∫∑p c√¢u tr√πng l·∫∑p v·ªõi t·ª∑ l·ªá trung b√¨nh ${result.overallSimilarity}%`);
    } else {
      console.log(`‚ùì K·∫øt qu·∫£ ${result.overallSimilarity}% kh√°c v·ªõi 83% mong ƒë·ª£i`);
      console.log('C√≥ th·ªÉ do logic t√°ch c√¢u ho·∫∑c t√≠nh to√°n kh√°c nhau');
    }
    
  } catch (error) {
    console.error('‚ùå L·ªói khi ch·∫°y test:', error);
  }
}

// Export
module.exports = {
  SentencePairAnalyzer,
  analyzeSentencePairs
};

// Ch·∫°y n·∫øu g·ªçi tr·ª±c ti·∫øp
if (require.main === module) {
  analyzeSentencePairs();
}