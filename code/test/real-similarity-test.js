/**
 * Test th·ª±c t·∫ø v·ªõi Vietnamese Stopword Service ƒë·ªÉ ph√¢n t√≠ch t·∫°i sao 83%
 */

const vietnameseStopwordService = require('../be/services/VietnameseStopwordService');

class RealSimilarityAnalyzer {
  constructor() {
    this.initialized = false;
  }

  async initialize() {
    if (!this.initialized) {
      console.log('üîß Kh·ªüi t·∫°o Vietnamese Stopword Service...');
      await vietnameseStopwordService.initialize();
      this.initialized = true;
      console.log('‚úÖ Kh·ªüi t·∫°o ho√†n t·∫•t!');
    }
  }

  // T√≠nh ƒë·ªô t∆∞∆°ng ƒë·ªìng ch√≠nh x√°c nh∆∞ trong code g·ªëc
  async calculateRealSimilarity(inputSentence, docSentence) {
    await this.initialize();
    
    console.log('üîç PH√ÇN T√çCH TH·ª∞C T·∫æ V·ªöI VIETNAMESE STOPWORD SERVICE');
    console.log('='.repeat(70));
    
    console.log('üìù C√¢u g·ªëc:');
    console.log('Input:', inputSentence);
    console.log('Doc:  ', docSentence);
    
    // S·ª≠ d·ª•ng extractMeaningfulWords th·ª±c t·∫ø
    const inputWords = vietnameseStopwordService.extractMeaningfulWords(inputSentence);
    const docWords = vietnameseStopwordService.extractMeaningfulWords(docSentence);
    
    console.log('\nüìä T·ª´ c√≥ nghƒ©a sau khi l·ªçc stopwords (TH·ª∞C T·∫æ):');
    console.log('Input words:', inputWords);
    console.log('Doc words:  ', docWords);
    console.log('S·ªë t·ª´ input:', inputWords.length);
    console.log('S·ªë t·ª´ doc:  ', docWords.length);
    
    // T√¨m t·ª´ chung (gi·ªëng logic trong findDuplicateSentences)
    const commonWords = inputWords.filter(word => docWords.includes(word));
    
    console.log('\nüîó T·ª´ chung:');
    console.log('Common words:', commonWords);
    console.log('S·ªë t·ª´ chung: ', commonWords.length);
    
    // T√≠nh ƒë·ªô t∆∞∆°ng ƒë·ªìng theo c√¥ng th·ª©c ch√≠nh x√°c
    const similarity = inputWords.length > 0 
      ? (commonWords.length / inputWords.length) * 100 
      : 0;
    
    console.log('\nüìà T√çNH TO√ÅN ƒê·ªò T∆Ø∆†NG ƒê·ªíNG:');
    console.log('C√¥ng th·ª©c: (S·ªë t·ª´ chung / S·ªë t·ª´ input) √ó 100');
    console.log(`T√≠nh to√°n: (${commonWords.length} / ${inputWords.length}) √ó 100`);
    console.log(`K·∫øt qu·∫£:   ${similarity.toFixed(2)}%`);
    console.log(`L√†m tr√≤n:  ${Math.round(similarity)}%`);
    
    // Ph√¢n t√≠ch chi ti·∫øt t·ª´ng t·ª´
    console.log('\nüîç PH√ÇN T√çCH T·ª™NG T·ª™:');
    console.log('T·ª´ trong input:');
    inputWords.forEach((word, index) => {
      const isCommon = commonWords.includes(word);
      console.log(`  ${index + 1}. "${word}" - ${isCommon ? '‚úÖ C√ì TRONG DOC' : '‚ùå KH√îNG C√ì'}`);
    });
    
    console.log('\nT·ª´ trong doc:');
    docWords.forEach((word, index) => {
      const isCommon = commonWords.includes(word);
      console.log(`  ${index + 1}. "${word}" - ${isCommon ? '‚úÖ C√ì TRONG INPUT' : '‚ùå KH√îNG C√ì'}`);
    });
    
    // Ki·ªÉm tra t·ª´ng t·ª´ c√≥ ph·∫£i stopword kh√¥ng
    console.log('\nüõë KI·ªÇM TRA STOPWORDS:');
    const allWordsInput = inputSentence.toLowerCase().split(/\s+/);
    const allWordsDoc = docSentence.toLowerCase().split(/\s+/);
    
    console.log('T·ª´ trong input sentence:');
    allWordsInput.forEach((word, index) => {
      const isStopword = vietnameseStopwordService.isStopword(word);
      const isKept = inputWords.includes(word);
      console.log(`  ${index + 1}. "${word}" - ${isStopword ? 'üõë STOPWORD' : '‚úÖ MEANINGFUL'} - ${isKept ? 'KEPT' : 'REMOVED'}`);
    });
    
    console.log('\nT·ª´ trong doc sentence:');
    allWordsDoc.forEach((word, index) => {
      const isStopword = vietnameseStopwordService.isStopword(word);
      const isKept = docWords.includes(word);
      console.log(`  ${index + 1}. "${word}" - ${isStopword ? 'üõë STOPWORD' : '‚úÖ MEANINGFUL'} - ${isKept ? 'KEPT' : 'REMOVED'}`);
    });
    
    console.log('\nüìã K·∫æT LU·∫¨N:');
    console.log(`ƒê·ªô t∆∞∆°ng ƒë·ªìng: ${Math.round(similarity)}%`);
    console.log(`Ng∆∞·ª°ng tr√πng l·∫∑p: 50%`);
    console.log(`K·∫øt qu·∫£: ${similarity >= 50 ? '‚úÖ TR√ôNG L·∫∂P' : '‚ùå KH√îNG TR√ôNG L·∫∂P'}`);
    
    // Gi·∫£i th√≠ch t·∫°i sao c√≥ k·∫øt qu·∫£ n√†y
    console.log('\nüí° GI·∫¢I TH√çCH K·∫æT QU·∫¢:');
    console.log('='.repeat(50));
    if (Math.round(similarity) === 83) {
      console.log('‚úÖ K·∫øt qu·∫£ kh·ªõp v·ªõi 83% nh∆∞ mong ƒë·ª£i!');
      console.log(`L√Ω do: C√≥ ${commonWords.length} t·ª´ chung trong t·ªïng s·ªë ${inputWords.length} t·ª´ c√≥ nghƒ©a c·ªßa input`);
      console.log(`T√≠nh to√°n: ${commonWords.length}/${inputWords.length} = ${(commonWords.length/inputWords.length*100).toFixed(1)}% ‚âà 83%`);
    } else {
      console.log(`‚ùì K·∫øt qu·∫£ ${Math.round(similarity)}% kh√°c v·ªõi 83% mong ƒë·ª£i`);
      console.log('C√≥ th·ªÉ do:');
      console.log('- Danh s√°ch stopwords kh√°c nhau');
      console.log('- Logic x·ª≠ l√Ω t·ª´ kh√°c nhau');
      console.log('- Phi√™n b·∫£n code kh√°c nhau');
    }
    
    return {
      inputSentence,
      docSentence,
      inputWords,
      docWords,
      commonWords,
      similarity: Math.round(similarity),
      exactSimilarity: similarity,
      isDuplicate: similarity >= 50
    };
  }

  // Test v·ªõi nhi·ªÅu c√°ch vi·∫øt kh√°c nhau
  async testVariations() {
    await this.initialize();
    
    console.log('\nüîÑ TEST V·ªöI C√ÅC BI·∫æN TH·ªÇ KH√ÅC NHAU');
    console.log('='.repeat(70));
    
    const variations = [
      {
        name: 'G·ªëc',
        input: "Th·ªÉ thao l√† m√¥n ∆∞a th√≠ch c·ªßa m·ªçi ng∆∞·ªùi t√¥i c≈©ng kh√¥ng ƒë·∫∑c bi·ªát",
        doc: "T√¥i l√† Kh√°nh, t√¥i ∆∞a th√≠ch th·ªÉ thao, ƒë·∫∑c bi·ªát l√† ƒë√° b√≥ng"
      },
      {
        name: 'ƒê·∫£o th·ª© t·ª±',
        input: "T√¥i l√† Kh√°nh, t√¥i ∆∞a th√≠ch th·ªÉ thao, ƒë·∫∑c bi·ªát l√† ƒë√° b√≥ng",
        doc: "Th·ªÉ thao l√† m√¥n ∆∞a th√≠ch c·ªßa m·ªçi ng∆∞·ªùi t√¥i c≈©ng kh√¥ng ƒë·∫∑c bi·ªát"
      },
      {
        name: 'B·ªè d·∫•u c√¢u',
        input: "Th·ªÉ thao l√† m√¥n ∆∞a th√≠ch c·ªßa m·ªçi ng∆∞·ªùi t√¥i c≈©ng kh√¥ng ƒë·∫∑c bi·ªát",
        doc: "T√¥i l√† Kh√°nh t√¥i ∆∞a th√≠ch th·ªÉ thao ƒë·∫∑c bi·ªát l√† ƒë√° b√≥ng"
      }
    ];
    
    for (const variation of variations) {
      console.log(`\n--- ${variation.name} ---`);
      const result = await this.calculateRealSimilarity(variation.input, variation.doc);
      console.log(`K·∫øt qu·∫£: ${result.similarity}%`);
    }
  }
}

// Ch·∫°y test
async function analyzeRealSimilarity() {
  const analyzer = new RealSimilarityAnalyzer();
  
  try {
    // Test ch√≠nh
    const docSentence = "T√¥i l√† Kh√°nh, t√¥i ∆∞a th√≠ch th·ªÉ thao, ƒë·∫∑c bi·ªát l√† ƒë√° b√≥ng";
    const inputSentence = "Th·ªÉ thao l√† m√¥n ∆∞a th√≠ch c·ªßa m·ªçi ng∆∞·ªùi t√¥i c≈©ng kh√¥ng ƒë·∫∑c bi·ªát";
    
    await analyzer.calculateRealSimilarity(inputSentence, docSentence);
    
    // Test c√°c bi·∫øn th·ªÉ
    await analyzer.testVariations();
    
  } catch (error) {
    console.error('‚ùå L·ªói khi ch·∫°y test:', error);
  }
}

// Export
module.exports = {
  RealSimilarityAnalyzer,
  analyzeRealSimilarity
};

// Ch·∫°y n·∫øu g·ªçi tr·ª±c ti·∫øp
if (require.main === module) {
  analyzeRealSimilarity();
}