/**
 * Test th·ª±c t·∫ø v·ªõi Vietnamese Stopword Service ƒë·ªÉ ph√¢n t√≠ch t·∫°i sao 83%
 */

const vietnameseStopwordService = require("../be/services/VietnameseStopwordService");

class RealSimilarityAnalyzer {
  constructor() {
    this.initialized = false;
  }

  async initialize() {
    if (!this.initialized) {
      console.log("üîß Kh·ªüi t·∫°o Vietnamese Stopword Service...");
      await vietnameseStopwordService.initialize();
      this.initialized = true;
      console.log("‚úÖ Kh·ªüi t·∫°o ho√†n t·∫•t!");
    }
  }

  // T·∫°o c·ª•m t·ª´ c√≥ nghƒ©a t·ª´ danh s√°ch t·ª´ (copy t·ª´ TreeAVL.js)
  createMeaningfulPhrases(meaningfulWords, maxPhraseLength = 2) {
    const allPhrases = new Set();
    const usedWordIndices = new Set();

    // ∆Øu ti√™n t·∫°o c·ª•m t·ª´ 2-gram tr∆∞·ªõc
    for (let i = 0; i <= meaningfulWords.length - 2; i++) {
      if (!usedWordIndices.has(i) && !usedWordIndices.has(i + 1)) {
        const phrase = meaningfulWords.slice(i, i + 2).join(" ");
        allPhrases.add(phrase);
        usedWordIndices.add(i);
        usedWordIndices.add(i + 1);
      }
    }

    // Th√™m c√°c t·ª´ ƒë∆°n l·∫ª ch∆∞a ƒë∆∞·ª£c s·ª≠ d·ª•ng
    meaningfulWords.forEach((word, index) => {
      if (!usedWordIndices.has(index)) {
        allPhrases.add(word);
      }
    });

    return Array.from(allPhrases);
  }

  // T√≠nh ƒë·ªô t∆∞∆°ng ƒë·ªìng ch√≠nh x√°c nh∆∞ trong code g·ªëc
  async calculateRealSimilarity(inputSentence, docSentence) {
    await this.initialize();

    console.log("üîç PH√ÇN T√çCH TH·ª∞C T·∫æ V·ªöI VIETNAMESE STOPWORD SERVICE");
    console.log("=".repeat(70));

    console.log("üìù C√¢u g·ªëc:");
    console.log("Input:", inputSentence);
    console.log("Doc:  ", docSentence);

    // S·ª≠ d·ª•ng extractMeaningfulWords th·ª±c t·∫ø
    const inputWords =
      vietnameseStopwordService.extractMeaningfulWords(inputSentence);
    const docWords =
      vietnameseStopwordService.extractMeaningfulWords(docSentence);

    // Nh√≥m th√†nh n-gram

    if (inputWords.length === 0 || docWords.length === 0) return 0;

    // T·∫°o c·ª•m t·ª´ t·ª´ c√°c t·ª´ c√≥ nghƒ©a
    let phrases1 = this.createMeaningfulPhrases(inputWords);
    let phrases2 = this.createMeaningfulPhrases(docWords);

    phrases1 = vietnameseStopwordService.extractMeaningfulWords(phrases1);
    phrases2 = vietnameseStopwordService.extractMeaningfulWords(phrases2);

    phrases1 = phrases1.flatMap((p) => p.split(/\s+/));
    phrases2 = phrases2.flatMap((p) => p.split(/\s+/));

    console.log("\nüìä T·ª´ c√≥ nghƒ©a sau khi l·ªçc stopwords (TH·ª∞C T·∫æ):");
    console.log("Input words:", phrases1);
    console.log("Doc words:  ", phrases2);

    // T√¨m t·ª´ chung (gi·ªëng logic trong findDuplicateSentences)
    const commonWords = phrases1.filter((word) => phrases2.includes(word));

    console.log("\nüîó T·ª´ chung:");
    console.log("Common words:", commonWords);

    // T√≠nh ƒë·ªô t∆∞∆°ng ƒë·ªìng theo c√¥ng th·ª©c ch√≠nh x√°c
    const similarity =
      phrases1.length > 0
        ? (commonWords.length / phrases1.length) * 100
        : 0;

    console.log("\nüìà T√çNH TO√ÅN ƒê·ªò T∆Ø∆†NG ƒê·ªíNG:");
    console.log("C√¥ng th·ª©c: (S·ªë t·ª´ chung / S·ªë t·ª´ input) √ó 100");
    console.log(
      `T√≠nh to√°n: (${commonWords.length} / ${phrases1.length}) √ó 100`
    );
    console.log(`K·∫øt qu·∫£:   ${similarity.toFixed(2)}%`);
    console.log(`L√†m tr√≤n:  ${Math.round(similarity)}%`);

    return {
      inputSentence,
      docSentence,
      inputWords,
      docWords,
      commonWords,
      similarity: Math.round(similarity),
      exactSimilarity: similarity,
      isDuplicate: similarity >= 50,
    };
  }

  // Test v·ªõi nhi·ªÅu c√°ch vi·∫øt kh√°c nhau
  async testVariations() {
    await this.initialize();

    console.log("\nüîÑ TEST V·ªöI C√ÅC BI·∫æN TH·ªÇ KH√ÅC NHAU");
    console.log("=".repeat(70));

    const variations = [
      {
        name: "G·ªëc",
        input: "Th·ªÉ thao l√† m√¥n ∆∞a th√≠ch c·ªßa m·ªçi ng∆∞·ªùi t√¥i c≈©ng kh√¥ng ƒë·∫∑c bi·ªát",
        doc: "T√¥i l√† Kh√°nh, t√¥i ∆∞a th√≠ch th·ªÉ thao, ƒë·∫∑c bi·ªát l√† ƒë√° b√≥ng",
      },
      {
        name: "ƒê·∫£o th·ª© t·ª±",
        input: "T√¥i l√† Kh√°nh, t√¥i ∆∞a th√≠ch th·ªÉ thao, ƒë·∫∑c bi·ªát l√† ƒë√° b√≥ng",
        doc: "Th·ªÉ thao l√† m√¥n ∆∞a th√≠ch c·ªßa m·ªçi ng∆∞·ªùi t√¥i c≈©ng kh√¥ng ƒë·∫∑c bi·ªát",
      },
      {
        name: "B·ªè d·∫•u c√¢u",
        input: "Th·ªÉ thao l√† m√¥n ∆∞a th√≠ch c·ªßa m·ªçi ng∆∞·ªùi t√¥i c≈©ng kh√¥ng ƒë·∫∑c bi·ªát",
        doc: "T√¥i l√† Kh√°nh t√¥i ∆∞a th√≠ch th·ªÉ thao ƒë·∫∑c bi·ªát l√† ƒë√° b√≥ng",
      },
    ];

    for (const variation of variations) {
      console.log(`\n--- ${variation.name} ---`);
      const result = await this.calculateRealSimilarity(
        variation.input,
        variation.doc
      );
      console.log(`K·∫øt qu·∫£: ${result.similarity}%`);
    }
  }
}

// Ch·∫°y test
async function analyzeRealSimilarity() {
  const analyzer = new RealSimilarityAnalyzer();

  try {
    // Test ch√≠nh
    const docSentence =
      "T√¥i l√† Kh√°nh, t√¥i ∆∞a th√≠ch th·ªÉ thao, ƒë·∫∑c bi·ªát l√† ƒë√° b√≥ng";
    const inputSentence =
      "Th·ªÉ thao l√† m√¥n ∆∞a th√≠ch c·ªßa m·ªçi ng∆∞·ªùi t√¥i c≈©ng kh√¥ng ƒë·∫∑c bi·ªát";

    await analyzer.calculateRealSimilarity(inputSentence, docSentence);

    // Test c√°c bi·∫øn th·ªÉ
    await analyzer.testVariations();
  } catch (error) {
    console.error("‚ùå L·ªói khi ch·∫°y test:", error);
  }
}

// Export
module.exports = {
  RealSimilarityAnalyzer,
  analyzeRealSimilarity,
};

// Ch·∫°y n·∫øu g·ªçi tr·ª±c ti·∫øp
if (require.main === module) {
  analyzeRealSimilarity();
}
