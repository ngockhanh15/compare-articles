import { useState, useEffect } from 'react';
import { useAuth } from '../contexts/AuthContext';
import { getSystemStats, initializeSystem, clearCache, getTreeStats } from '../services/api';

const SystemStats = () => {
  const { user } = useAuth();
  const [stats, setStats] = useState(null);
  const [treeStats, setTreeStats] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [isInitializing, setIsInitializing] = useState(false);
  const [isClearingCache, setIsClearingCache] = useState(false);

  // Ki·ªÉm tra quy·ªÅn admin
  const isAdmin = user?.role === 'admin';

  const fetchStats = async () => {
    try {
      setLoading(true);
      setError('');
      const [systemResponse, treeResponse] = await Promise.all([
        getSystemStats(),
        getTreeStats()
      ]);
      setStats(systemResponse);
      if (treeResponse.success) {
        setTreeStats(treeResponse.stats);
      }
    } catch (error) {
      console.error('Error fetching system stats:', error);
      setError(error.message || 'L·ªói khi l·∫•y th·ªëng k√™ h·ªá th·ªëng');
    } finally {
      setLoading(false);
    }
  };

  const handleInitializeSystem = async () => {
    if (!isAdmin) return;
    
    try {
      setIsInitializing(true);
      setError('');
      await initializeSystem();
      await fetchStats(); // Refresh stats after initialization
      alert('H·ªá th·ªëng ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o l·∫°i th√†nh c√¥ng!');
    } catch (error) {
      console.error('Error initializing system:', error);
      setError(error.message || 'L·ªói khi kh·ªüi t·∫°o h·ªá th·ªëng');
    } finally {
      setIsInitializing(false);
    }
  };

  const handleClearCache = async () => {
    if (!isAdmin) return;
    
    if (!confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a to√†n b·ªô cache? H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c.')) {
      return;
    }
    
    try {
      setIsClearingCache(true);
      setError('');
      await clearCache();
      await fetchStats(); // Refresh stats after clearing cache
      alert('Cache ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng!');
    } catch (error) {
      console.error('Error clearing cache:', error);
      setError(error.message || 'L·ªói khi x√≥a cache');
    } finally {
      setIsClearingCache(false);
    }
  };

  useEffect(() => {
    fetchStats();
    
    // Auto refresh every 30 seconds
    const interval = setInterval(fetchStats, 30000);
    return () => clearInterval(interval);
  }, []);

  if (!isAdmin) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-neutral-50 to-neutral-100">
        <div className="max-w-4xl px-4 py-8 mx-auto">
          <div className="p-8 text-center bg-white shadow-xl rounded-2xl">
            <div className="mb-4 text-6xl">üö´</div>
            <h2 className="mb-2 text-2xl font-bold text-neutral-800">
              Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p
            </h2>
            <p className="text-neutral-600">
              Ch·ªâ admin m·ªõi c√≥ th·ªÉ xem th·ªëng k√™ h·ªá th·ªëng.
            </p>
          </div>
        </div>
      </div>
    );
  }

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-neutral-50 to-neutral-100">
        <div className="max-w-6xl px-4 py-8 mx-auto">
          <div className="p-8 text-center bg-white shadow-xl rounded-2xl">
            <div className="w-8 h-8 mx-auto mb-4 border-b-2 border-blue-600 rounded-full animate-spin"></div>
            <p className="text-neutral-600">ƒêang t·∫£i th·ªëng k√™ h·ªá th·ªëng...</p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-neutral-50 to-neutral-100">
      <div className="max-w-6xl px-4 py-8 mx-auto">
        {/* Header */}
        <div className="mb-8 text-center">
          <div className="flex items-center justify-center mb-4">
            <div className="p-3 mr-3 shadow-lg bg-gradient-primary rounded-2xl">
              <span className="text-3xl">üìä</span>
            </div>
            <h1 className="text-3xl font-bold text-neutral-800">
              Th·ªëng k√™ H·ªá th·ªëng
            </h1>
          </div>
          <p className="text-neutral-600">
            Theo d√µi hi·ªáu su·∫•t v√† tr·∫°ng th√°i c·ªßa h·ªá th·ªëng ki·ªÉm tra plagiarism
          </p>
        </div>

        {/* Error Message */}
        {error && (
          <div className="p-4 mb-6 border border-red-200 bg-red-50 rounded-xl">
            <div className="flex items-center">
              <span className="mr-2 text-red-500">‚ùå</span>
              <p className="text-sm text-red-700">{error}</p>
            </div>
          </div>
        )}

        {/* Admin Controls */}
        <div className="p-6 mb-8 bg-white shadow-xl rounded-2xl">
          <h2 className="flex items-center mb-4 text-xl font-semibold text-neutral-800">
            <span className="mr-2">‚öôÔ∏è</span>
            ƒêi·ªÅu khi·ªÉn Admin
          </h2>
          <div className="flex gap-4">
            <button
              onClick={handleInitializeSystem}
              disabled={isInitializing}
              className="flex items-center px-4 py-2 text-sm font-medium text-white transition-all duration-200 bg-blue-600 rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {isInitializing ? (
                <>
                  <div className="w-4 h-4 mr-2 border-b-2 border-white rounded-full animate-spin"></div>
                  ƒêang kh·ªüi t·∫°o...
                </>
              ) : (
                <>
                  <span className="mr-2">üîÑ</span>
                  Kh·ªüi t·∫°o l·∫°i h·ªá th·ªëng
                </>
              )}
            </button>
            
            <button
              onClick={handleClearCache}
              disabled={isClearingCache}
              className="flex items-center px-4 py-2 text-sm font-medium text-white transition-all duration-200 bg-red-600 rounded-lg hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {isClearingCache ? (
                <>
                  <div className="w-4 h-4 mr-2 border-b-2 border-white rounded-full animate-spin"></div>
                  ƒêang x√≥a...
                </>
              ) : (
                <>
                  <span className="mr-2">üóëÔ∏è</span>
                  X√≥a Cache
                </>
              )}
            </button>
            
            <button
              onClick={fetchStats}
              className="flex items-center px-4 py-2 text-sm font-medium transition-all duration-200 border rounded-lg border-neutral-300 text-neutral-700 hover:bg-neutral-50 focus:outline-none focus:ring-2 focus:ring-neutral-500"
            >
              <span className="mr-2">üîÑ</span>
              L√†m m·ªõi
            </button>
          </div>
        </div>

        {stats && (
          <div className="grid gap-8 lg:grid-cols-2">
            {/* Detection System Stats */}
            <div className="p-6 bg-white shadow-xl rounded-2xl">
              <h2 className="flex items-center mb-4 text-xl font-semibold text-neutral-800">
                <span className="mr-2">üîç</span>
                H·ªá th·ªëng Detection
              </h2>
              
              <div className="space-y-4">
                <div className="grid grid-cols-2 gap-4">
                  <div className="p-4 border border-blue-200 rounded-xl bg-blue-50">
                    <div className="text-2xl font-bold text-blue-600">
                      {stats.detectionSystem?.totalDocuments?.toLocaleString() || 0}
                    </div>
                    <div className="text-sm text-blue-700">T·ªïng t√†i li·ªáu</div>
                  </div>
                  
                  <div className="p-4 border border-green-200 rounded-xl bg-green-50">
                    <div className="text-2xl font-bold text-green-600">
                      {stats.detectionSystem?.totalChunks?.toLocaleString() || 0}
                    </div>
                    <div className="text-sm text-green-700">T·ªïng chunks</div>
                  </div>
                </div>
                
                <div className="p-4 border border-purple-200 rounded-xl bg-purple-50">
                  <div className="flex items-center justify-between">
                    <span className="font-medium text-purple-700">Tr·∫°ng th√°i kh·ªüi t·∫°o:</span>
                    <span className={`px-3 py-1 rounded-full text-sm font-medium ${
                      stats.detectionSystem?.initialized 
                        ? 'bg-green-100 text-green-800' 
                        : 'bg-red-100 text-red-800'
                    }`}>
                      {stats.detectionSystem?.initialized ? '‚úÖ ƒê√£ kh·ªüi t·∫°o' : '‚ùå Ch∆∞a kh·ªüi t·∫°o'}
                    </span>
                  </div>
                </div>
                
                {stats.detectionSystem?.memoryUsage && (
                  <div className="p-4 border border-orange-200 rounded-xl bg-orange-50">
                    <div className="flex items-center justify-between">
                      <span className="font-medium text-orange-700">B·ªô nh·ªõ s·ª≠ d·ª•ng:</span>
                      <span className="font-medium text-orange-800">
                        {Math.round(stats.detectionSystem.memoryUsage.heapUsed / 1024 / 1024)}MB
                      </span>
                    </div>
                  </div>
                )}
              </div>
            </div>

            {/* Cache System Stats */}
            <div className="p-6 bg-white shadow-xl rounded-2xl">
              <h2 className="flex items-center mb-4 text-xl font-semibold text-neutral-800">
                <span className="mr-2">‚ö°</span>
                H·ªá th·ªëng Cache
              </h2>
              
              <div className="space-y-4">
                <div className="grid grid-cols-2 gap-4">
                  <div className="p-4 border border-indigo-200 rounded-xl bg-indigo-50">
                    <div className="text-2xl font-bold text-indigo-600">
                      {stats.cacheSystem?.textCacheSize?.toLocaleString() || 0}
                    </div>
                    <div className="text-sm text-indigo-700">Text Cache</div>
                  </div>
                  
                  <div className="p-4 border border-pink-200 rounded-xl bg-pink-50">
                    <div className="text-2xl font-bold text-pink-600">
                      {stats.cacheSystem?.chunkCacheSize?.toLocaleString() || 0}
                    </div>
                    <div className="text-sm text-pink-700">Chunk Cache</div>
                  </div>
                </div>
                
                <div className="p-4 border border-teal-200 rounded-xl bg-teal-50">
                  <div className="flex items-center justify-between">
                    <span className="font-medium text-teal-700">T·ª∑ l·ªá hit cache:</span>
                    <span className="font-medium text-teal-800">
                      {stats.cacheSystem?.hitRate || '0%'}
                    </span>
                  </div>
                </div>
                
                <div className="grid grid-cols-2 gap-4 text-sm">
                  <div className="p-3 border border-gray-200 rounded-lg bg-gray-50">
                    <div className="font-medium text-gray-700">Cache Hits:</div>
                    <div className="text-gray-600">{stats.cacheSystem?.cacheHits || 0}</div>
                  </div>
                  <div className="p-3 border border-gray-200 rounded-lg bg-gray-50">
                    <div className="font-medium text-gray-700">Cache Misses:</div>
                    <div className="text-gray-600">{stats.cacheSystem?.cacheMisses || 0}</div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* AVL Tree Stats */}
        {treeStats && (
          <div className="mt-8">
            <div className="p-6 bg-white shadow-xl rounded-2xl">
              <h2 className="flex items-center mb-4 text-xl font-semibold text-neutral-800">
                <span className="mr-2">üå≥</span>
                AVL Tree (H·ªá th·ªëng ki·ªÉm tra tr√πng l·∫∑p)
              </h2>
              
              <div className="grid gap-4 md:grid-cols-3">
                <div className="p-4 border border-green-200 rounded-xl bg-green-50">
                  <div className="text-2xl font-bold text-green-600">
                    {treeStats.totalDocuments || 0}
                  </div>
                  <div className="text-sm text-green-700">T√†i li·ªáu trong c√¢y</div>
                </div>
                
                <div className="p-4 border border-blue-200 rounded-xl bg-blue-50">
                  <div className="text-2xl font-bold text-blue-600">
                    {treeStats.initialized ? 'C√≥' : 'Kh√¥ng'}
                  </div>
                  <div className="text-sm text-blue-700">ƒê√£ kh·ªüi t·∫°o</div>
                </div>
                
                <div className="p-4 border border-purple-200 rounded-xl bg-purple-50">
                  <div className="text-2xl font-bold text-purple-600">
                    AVL
                  </div>
                  <div className="text-sm text-purple-700">C·∫•u tr√∫c d·ªØ li·ªáu</div>
                </div>
              </div>
              
              <div className="p-4 mt-4 border border-yellow-200 rounded-xl bg-yellow-50">
                <div className="flex items-center">
                  <span className="mr-2 text-yellow-600">üí°</span>
                  <div className="text-sm text-yellow-700">
                    <strong>AVL Tree</strong> ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ t·ªëi ∆∞u h√≥a vi·ªác t√¨m ki·∫øm v√† so s√°nh n·ªôi dung tr√πng l·∫∑p. 
                    C·∫•u tr√∫c n√†y ƒë·∫£m b·∫£o th·ªùi gian t√¨m ki·∫øm O(log n) v√† t·ª± ƒë·ªông c√¢n b·∫±ng.
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Last Updated */}
        {stats && (
          <div className="mt-8 text-center">
            <p className="text-sm text-neutral-500">
              C·∫≠p nh·∫≠t l·∫ßn cu·ªëi: {new Date(stats.timestamp).toLocaleString('vi-VN')}
            </p>
          </div>
        )}
      </div>
    </div>
  );
};

export default SystemStats;