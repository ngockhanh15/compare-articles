const { TextHasher } = require('./be/utils/TreeAVL');
const vietnameseStopwordService = require('./be/services/VietnameseStopwordService');

async function simulateProcess() {
  console.log('=== GI·∫¢ L·∫¨P QUY TR√åNH KI·ªÇM TRA TR√ôNG L·∫∂P ===\n');
  
  // Kh·ªüi t·∫°o stopword service
  await vietnameseStopwordService.initialize();
  
  const doc1 = "T√¥i l√† Kh√°nh, t√¥i ∆∞a th√≠ch th·ªÉ thao, ƒë·∫∑c bi·ªát l√† ƒë√° b√≥ng.";
  const doc2 = "Th·ªÉ thao l√† m√¥n ∆∞a th√≠ch c·ªßa m·ªçi ng∆∞·ªùi t√¥i c≈©ng kh√¥ng ƒë·∫∑c bi·ªát.";
  
  console.log('üìÑ DOCUMENTS:');
  console.log('DOC1 (ƒë√£ c√≥ trong database):', doc1);
  console.log('DOC2 (ng∆∞·ªùi d√πng nh·∫≠p v√†o):', doc2);
  console.log();
  
  // B∆Ø·ªöC 1: T√≠nh t·ª∑ l·ªá tr√πng l·∫∑p th·ª±c t·∫ø
  console.log('üîç B∆Ø·ªöC 1: T√çNH T·ª∂ L·ªÜ TR√ôNG L·∫∂P');
  const plagiarismResult = TextHasher.calculatePlagiarismRatio(doc2, doc1, true);
  console.log('K·∫øt qu·∫£ so s√°nh doc2 vs doc1:', plagiarismResult);
  console.log(`T·ª∑ l·ªá tr√πng l·∫∑p: ${plagiarismResult.ratio}%`);
  console.log();
  
  // B∆Ø·ªöC 2: √Åp d·ª•ng logic threshold
  console.log('‚öñÔ∏è B∆Ø·ªöC 2: √ÅP D·ª§NG LOGIC THRESHOLD');
  const threshold = 50;
  const isDetected = plagiarismResult.ratio > threshold;
  
  console.log(`Ng∆∞·ª°ng: > ${threshold}%`);
  console.log(`T·ª∑ l·ªá th·ª±c t·∫ø: ${plagiarismResult.ratio}%`);
  console.log(`ƒêi·ªÅu ki·ªán: ${plagiarismResult.ratio}% > ${threshold}% = ${isDetected}`);
  console.log();
  
  // B∆Ø·ªöC 3: X√°c ƒë·ªãnh confidence
  console.log('üéØ B∆Ø·ªöC 3: X√ÅC ƒê·ªäNH CONFIDENCE');
  const confidence = isDetected ? 'high' : 'low';
  console.log(`Confidence: ${confidence}`);
  console.log(`Logic: ${plagiarismResult.ratio}% ${isDetected ? '>' : '‚â§'} 50% ‚Üí confidence = ${confidence}`);
  console.log();
  
  // B∆Ø·ªöC 4: K·∫øt qu·∫£ hi·ªÉn th·ªã tr√™n giao di·ªán
  console.log('üñ•Ô∏è B∆Ø·ªöC 4: HI·ªÇN TH·ªä TR√äN GIAO DI·ªÜN');
  const displayResult = isDetected ? 'PH√ÅT HI·ªÜN TR√ôNG L·∫∂P' : 'KH√îNG TR√ôNG L·∫∂P';
  const statusColor = isDetected ? 'üî¥ ƒê·ªè' : 'üü¢ Xanh';
  const statusIcon = isDetected ? 'üö®' : '‚úÖ';
  
  console.log(`Ti√™u ƒë·ªÅ: ${statusIcon} ${displayResult}`);
  console.log(`T·ª∑ l·ªá hi·ªÉn th·ªã: ${plagiarismResult.ratio}%`);
  console.log(`M√†u s·∫Øc: ${statusColor}`);
  console.log(`Confidence: ${confidence}`);
  console.log(`Ng∆∞·ª°ng gi·∫£i th√≠ch: (Ng∆∞·ª°ng: > 50% = tr√πng l·∫∑p)`);
  console.log();
  
  // B∆Ø·ªöC 5: Test cases kh√°c
  console.log('üß™ B∆Ø·ªöC 5: TEST CASES KH√ÅC');
  const testCases = [
    { name: "Doc c·ªßa b·∫°n", ratio: plagiarismResult.ratio },
    { name: "Tr∆∞·ªùng h·ª£p 30%", ratio: 30 },
    { name: "Tr∆∞·ªùng h·ª£p 50%", ratio: 50 },
    { name: "Tr∆∞·ªùng h·ª£p 50.1%", ratio: 50.1 },
    { name: "Tr∆∞·ªùng h·ª£p 70%", ratio: 70 }
  ];
  
  testCases.forEach(testCase => {
    const detected = testCase.ratio > 50;
    const conf = detected ? 'high' : 'low';
    const display = detected ? 'TR√ôNG L·∫∂P' : 'KH√îNG TR√ôNG L·∫∂P';
    const icon = detected ? 'üö®' : '‚úÖ';
    
    console.log(`${testCase.name}: ${testCase.ratio}% ‚Üí ${icon} ${display} (confidence: ${conf})`);
  });
  
  console.log();
  
  // B∆Ø·ªöC 6: K·∫øt lu·∫≠n
  console.log('üìã B∆Ø·ªöC 6: K·∫æT LU·∫¨N');
  console.log('V·ªõi doc1 v√† doc2 c·ªßa b·∫°n:');
  console.log(`‚úÖ T·ª∑ l·ªá tr√πng l·∫∑p: ${plagiarismResult.ratio}% (hi·ªÉn th·ªã ch√≠nh x√°c)`);
  console.log(`‚úÖ K·∫øt lu·∫≠n: ${displayResult}`);
  console.log(`‚úÖ Logic: ${plagiarismResult.ratio}% ${isDetected ? '>' : '‚â§'} 50% = ${isDetected ? 'Tr√πng l·∫∑p' : 'Kh√¥ng tr√πng l·∫∑p'}`);
  console.log(`‚úÖ Confidence: ${confidence}`);
  console.log(`‚úÖ M√†u s·∫Øc: ${statusColor}`);
  
  console.log('\nüéØ Y√äU C·∫¶U ƒê√É ƒê∆Ø·ª¢C ƒê√ÅP ·ª®NG:');
  console.log('1. ‚úÖ Hi·ªÉn th·ªã t·ª∑ l·ªá % ch√≠nh x√°c d√π tr√πng bao nhi√™u');
  console.log('2. ‚úÖ K√®m theo ƒë√°nh gi√° "Tr√πng l·∫∑p" ho·∫∑c "Kh√¥ng tr√πng l·∫∑p"');
  console.log('3. ‚úÖ D·ª±a tr√™n ng∆∞·ª°ng 50% ƒë√£ thi·∫øt l·∫≠p');
  console.log('4. ‚úÖ Logic ƒë∆°n gi·∫£n: > 50% = tr√πng, ‚â§ 50% = kh√¥ng tr√πng');
  
  // Ki·ªÉm tra chi ti·∫øt phrases
  console.log('\nüîç CHI TI·∫æT PHRASES:');
  console.log('Phrases doc1:', plagiarismResult.sourcePhrasesList);
  console.log('Phrases doc2:', plagiarismResult.checkPhrasesList);
  console.log('Phrases tr√πng:', plagiarismResult.matchedPhrasesList);
  console.log(`T√≠nh to√°n: ${plagiarismResult.matchedPhrasesList.length}/${plagiarismResult.checkPhrasesList.length} = ${plagiarismResult.ratio}%`);
}

simulateProcess().catch(console.error);